{"version":3,"sources":["components/logo_300x289.png","components/Header.js","components/SearchBar.js","components/Weather.js","components/WeatherGraph.js","App.js","index.js"],"names":["Header","className","src","Logo","alt","SearchBar","setWeather","apiKey","setSearch","React","useState","location","setLocation","onSubmit","event","preventDefault","axios","get","then","res","city","data","name","temp","Math","round","main","clouds","all","humidity","feels_like","wind","speed","condition","weather","type","onChange","target","value","Weather","moment","format","tempDataset","timeDataset","WeatherGraph","graphSlider","day","segmentSize","length","firstDaySegmentsSize","otherDaySegmentsSize","document","querySelector","style","right","console","log","useEffect","slicer","list","map","elem","index","m","utc","dt","slice","ctxFixed","getElementById","getContext","Chart","labels","datasets","backgroundColor","borderColor","pointBackgroundColor","options","maintainAspectRatio","legend","display","scales","yAxes","gridLines","ticks","stepSize","xAxes","fontColor","top","offsetTop","ctx","id","position","left","onClick","App","search","ReactDOM","render"],"mappings":"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","file":"static/js/main.8271c726.chunk.js","sourcesContent":["export default __webpack_public_path__ + \"static/media/logo_300x289.c6813ae5.png\";","import React from \"react\";\r\nimport Logo from \"./logo_300x289.png\";\r\n\r\nexport default function Header() {\r\n  return (\r\n    <div className=\"header\">\r\n      <div className=\"logo\">\r\n        <img src={Logo} alt=\"logo\" />\r\n      </div>\r\n      <div className=\"title\">\r\n        <h1>Weather Forcaster</h1>\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n","import React from \"react\";\r\nimport axios from \"axios\";\r\n\r\nexport default function SearchBar({ setWeather, apiKey, setSearch }) {\r\n  const [location, setLocation] = React.useState(\"\");\r\n  function submitHandler(event) {\r\n    event.preventDefault();\r\n    axios\r\n      .get(\r\n        `https://api.openweathermap.org/data/2.5/weather?q=${location}&units=metric&appid=${apiKey}\r\n`\r\n      )\r\n      .then((res) => {\r\n        setWeather({\r\n          city: res.data.name,\r\n          temp: Math.round(res.data.main.temp),\r\n          clouds: res.data.clouds.all,\r\n          humidity: res.data.main.humidity,\r\n          feels_like: Math.round(res.data.main.feels_like),\r\n          wind: res.data.wind.speed,\r\n          condition: res.data.weather[0].main,\r\n        });\r\n        setSearch(true);\r\n      });\r\n  }\r\n  function changeHandler(event) {\r\n    setLocation(event.target.value);\r\n  }\r\n  return (\r\n    <form onSubmit={submitHandler}>\r\n      <input type=\"text\" onChange={changeHandler} />\r\n      <button>Search</button>\r\n    </form>\r\n  );\r\n}\r\n","import React from \"react\";\r\nimport moment from \"moment\";\r\n\r\nexport default function Weather({ weather }) {\r\n  return (\r\n    <div className=\"weather\">\r\n      <div>\r\n        <h2>{weather.city}</h2>\r\n        <h2>{moment().format(\"dddd h:mm a\")}</h2>\r\n        <h2>{weather.condition}</h2>\r\n      </div>\r\n      <div className=\"tempareture\">\r\n        <img src=\"http://openweathermap.org/img/wn/50n@2x.png\" alt=\"icon\" />\r\n        <h1>{weather.temp}</h1>\r\n        <div className=\"unit\">\r\n          <span>o</span>\r\n          <span>C</span>\r\n        </div>\r\n      </div>\r\n      <div className=\"additionalInfo\">\r\n        <h3>\r\n          Feels like {weather.feels_like} <sup>o</sup>C{\" \"}\r\n        </h3>\r\n        <div>\r\n          <h3>Cloudiness: {weather.clouds}%</h3>\r\n          <h3>Humudity : {weather.humidity}%</h3>\r\n          <h3>Wind : {weather.wind} m/s</h3>\r\n        </div>\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n","import React from \"react\";\r\nimport Chart from \"chart.js\";\r\nimport axios from \"axios\";\r\nimport moment from \"moment\";\r\n\r\nvar timeDataset = [];\r\nvar tempDataset;\r\n\r\nexport default function WeatherGraph({ city, apiKey }) {\r\n  function graphSlider(day) {\r\n    let segmentSize = 2000 / timeDataset.length;\r\n    let firstDaySegments = timeDataset.length - 32;\r\n    let firstDaySegmentsSize = firstDaySegments * segmentSize;\r\n    let otherDaySegmentsSize = segmentSize * 8;\r\n\r\n    if (day == 0) document.querySelector(\".chartjs-wrapper\").style.right = 0;\r\n    else {\r\n      console.log(\"hlw shaon\");\r\n\r\n      document.querySelector(\".chartjs-wrapper\").style.right =\r\n        firstDaySegmentsSize + otherDaySegmentsSize * (day - 1) + \"px\";\r\n    }\r\n  }\r\n\r\n  React.useEffect(() => {\r\n    axios\r\n      .get(\r\n        `https://api.openweathermap.org/data/2.5/forecast?q=${city}&units=metric&appid=${apiKey}`\r\n      )\r\n      .then((res) => {\r\n        let slicer;\r\n        timeDataset = res.data.list\r\n          .map((elem, index) => {\r\n            let m = moment.utc(elem.dt * 1000);\r\n            if (index == 0) slicer = m.format(\"h\");\r\n            return m.format(\"h a\");\r\n          })\r\n          .slice(0, -(slicer / 3));\r\n        tempDataset = res.data.list\r\n          .map((elem) => Math.round(elem.main.temp))\r\n          .slice(0, timeDataset.length);\r\n\r\n        //visualizing yAxis\r\n        var ctxFixed = document.getElementById(\"myFixedChart\").getContext(\"2d\");\r\n        var chart = new Chart(ctxFixed, {\r\n          // The type of chart we want to create\r\n          type: \"line\",\r\n\r\n          // The data for our dataset\r\n          data: {\r\n            labels: timeDataset,\r\n            datasets: [\r\n              {\r\n                backgroundColor: \"transparent\",\r\n                borderColor: \"transparent\",\r\n                data: tempDataset,\r\n                pointBackgroundColor: \"transparent\",\r\n              },\r\n            ],\r\n          },\r\n\r\n          // Configuration options go here\r\n          options: {\r\n            maintainAspectRatio: false,\r\n\r\n            legend: {\r\n              display: false,\r\n            },\r\n            scales: {\r\n              yAxes: [\r\n                {\r\n                  gridLines: {\r\n                    display: false,\r\n                  },\r\n                  ticks: {\r\n                    stepSize: 3,\r\n                  },\r\n                },\r\n              ],\r\n              xAxes: [\r\n                {\r\n                  gridLines: {\r\n                    display: false,\r\n                  },\r\n                  ticks: {\r\n                    fontColor: \"transparent\",\r\n                  },\r\n                },\r\n              ],\r\n            },\r\n          },\r\n        });\r\n        //positionsing yAxis\r\n        document.querySelector(\".fixed\").style.top =\r\n          document.querySelector(\".weather-grapher\").offsetTop + \"px\";\r\n\r\n        //visualizing data with chart.js\r\n        var ctx = document.getElementById(\"myChart\").getContext(\"2d\");\r\n        var chart = new Chart(ctx, {\r\n          // The type of chart we want to create\r\n          type: \"line\",\r\n\r\n          // The data for our dataset\r\n          data: {\r\n            labels: timeDataset,\r\n            datasets: [\r\n              {\r\n                backgroundColor: \"#e2dfdf\",\r\n                borderColor: \"gray\",\r\n                data: tempDataset,\r\n                pointBackgroundColor: \"black\",\r\n              },\r\n            ],\r\n          },\r\n\r\n          // Configuration options go here\r\n          options: {\r\n            maintainAspectRatio: false,\r\n\r\n            legend: {\r\n              display: false,\r\n            },\r\n            scales: {\r\n              yAxes: [\r\n                {\r\n                  gridLines: {\r\n                    display: false,\r\n                  },\r\n                  ticks: {\r\n                    stepSize: 3,\r\n                    fontColor: \"transparent\",\r\n                  },\r\n                },\r\n              ],\r\n              xAxes: [\r\n                {\r\n                  ticks: {\r\n                    backgroundColor: \"red\",\r\n                  },\r\n                  gridLines: {\r\n                    display: false,\r\n                  },\r\n                },\r\n              ],\r\n            },\r\n          },\r\n        });\r\n      });\r\n  });\r\n\r\n  return (\r\n    <>\r\n      <div className=\"weather-grapher\">\r\n        <div className=\"chartjs-wrapper\">\r\n          <canvas id=\"myChart\"></canvas>\r\n        </div>\r\n      </div>\r\n      <div\r\n        className=\"weather-grapher fixed\"\r\n        style={{ position: \"absolute\", left: \"5px\" }}\r\n      >\r\n        <div className=\"chartjs-wrapper \">\r\n          <canvas id=\"myFixedChart\" className=\"fixed-chart\"></canvas>\r\n        </div>\r\n      </div>\r\n      <div className=\"day\">\r\n        <button onClick={() => graphSlider(0)}>sunday</button>\r\n        <button onClick={() => graphSlider(1)}>monday</button>\r\n        <button onClick={() => graphSlider(2)}>tuesday</button>\r\n        <button onClick={() => graphSlider(3)}>wednesday</button>\r\n        <button onClick={() => graphSlider(4)}>thursday</button>\r\n      </div>\r\n    </>\r\n  );\r\n}\r\n","import React from \"react\";\nimport axios from \"axios\";\nimport \"./App.css\";\nimport Header from \"./components/Header\";\nimport SearchBar from \"./components/SearchBar\";\nimport Weather from \"./components/Weather\";\nimport WeatherGraph from \"./components/WeatherGraph\";\nconst apiKey = \"88e70fa14920eb4a1daf835df275c463\";\n\nfunction App() {\n  const [weather, setWeather] = React.useState({});\n  const [search, setSearch] = React.useState(false);\n\n  return (\n    <div className=\"app\">\n      <Header />\n      <SearchBar\n        setWeather={setWeather}\n        apiKey={apiKey}\n        setSearch={setSearch}\n      />\n      {search ? (\n        <>\n          <Weather weather={weather} />\n          <WeatherGraph city={weather.city} apiKey={apiKey} />\n        </>\n      ) : (\n        <h2>search for your location...</h2>\n      )}\n    </div>\n  );\n}\n\nexport default App;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport App from \"./App\";\n\nReactDOM.render(<App />, document.getElementById(\"root\"));\n"],"sourceRoot":""}